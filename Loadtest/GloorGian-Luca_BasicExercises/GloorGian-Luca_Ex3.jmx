<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="GloorGian-Luca_Ex3">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${__property(ACCESS_TOKEN,defaultToken)}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <stringProp name="HTTPSampler.domain">api.citiwattsdev.hevs.ch</stringProp>
        <stringProp name="HTTPSampler.port">443</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Variables pré-définies">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CM">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Start Heat Load Calculation">
          <stringProp name="HTTPSampler.domain">api.citiwattsdevcrashtest.hevs.ch</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/api/cm/compute-async/</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;url_file&quot;:0,&quot;scalevalue&quot;:&quot;nuts3&quot;,&quot;inputs&quot;:[{&quot;input_id&quot;:&quot;70&quot;,&quot;input_name&quot;:&quot;Residential heating factor&quot;,&quot;input_type&quot;:&quot;input&quot;,&quot;input_parameter_name&quot;:&quot;res_heating_factor&quot;,&quot;input_value&quot;:&quot;1&quot;,&quot;input_priority&quot;:&quot;0&quot;,&quot;input_unit&quot;:&quot; &quot;,&quot;input_min&quot;:&quot;0&quot;,&quot;input_max&quot;:&quot;10&quot;,&quot;createdAt&quot;:&quot;2025-04-10 09:41:24.919335&quot;,&quot;updatedAt&quot;:&quot;2025-04-10 09:41:24.919333&quot;,&quot;cm_id&quot;:&quot;3&quot;,&quot;input_description&quot;:&quot;&quot;,&quot;input_default_value&quot;:&quot;1&quot;},{&quot;input_id&quot;:&quot;71&quot;,&quot;input_name&quot;:&quot;Tertiary heating factor&quot;,&quot;input_type&quot;:&quot;input&quot;,&quot;input_parameter_name&quot;:&quot;ter_heating_factor&quot;,&quot;input_value&quot;:&quot;1&quot;,&quot;input_priority&quot;:&quot;0&quot;,&quot;input_unit&quot;:&quot; &quot;,&quot;input_min&quot;:&quot;0&quot;,&quot;input_max&quot;:&quot;10&quot;,&quot;createdAt&quot;:&quot;2025-04-10 09:41:24.919335&quot;,&quot;updatedAt&quot;:&quot;2025-04-10 09:41:24.919333&quot;,&quot;cm_id&quot;:&quot;3&quot;,&quot;input_description&quot;:&quot;&quot;,&quot;input_default_value&quot;:&quot;1&quot;},{&quot;input_id&quot;:&quot;72&quot;,&quot;input_name&quot;:&quot;Residential hot water supply factor&quot;,&quot;input_type&quot;:&quot;input&quot;,&quot;input_parameter_name&quot;:&quot;res_water_factor&quot;,&quot;input_value&quot;:&quot;1&quot;,&quot;input_priority&quot;:&quot;0&quot;,&quot;input_unit&quot;:&quot; &quot;,&quot;input_min&quot;:&quot;0&quot;,&quot;input_max&quot;:&quot;10&quot;,&quot;createdAt&quot;:&quot;2025-04-10 09:41:24.919335&quot;,&quot;updatedAt&quot;:&quot;2025-04-10 09:41:24.919333&quot;,&quot;cm_id&quot;:&quot;3&quot;,&quot;input_description&quot;:&quot;&quot;,&quot;input_default_value&quot;:&quot;1&quot;},{&quot;input_id&quot;:&quot;73&quot;,&quot;input_name&quot;:&quot;Tertiary hot water supply factor&quot;,&quot;input_type&quot;:&quot;input&quot;,&quot;input_parameter_name&quot;:&quot;ter_water_factor&quot;,&quot;input_value&quot;:&quot;1&quot;,&quot;input_priority&quot;:&quot;0&quot;,&quot;input_unit&quot;:&quot; &quot;,&quot;input_min&quot;:&quot;0&quot;,&quot;input_max&quot;:&quot;10&quot;,&quot;createdAt&quot;:&quot;2025-04-10 09:41:24.919335&quot;,&quot;updatedAt&quot;:&quot;2025-04-10 09:41:24.919333&quot;,&quot;cm_id&quot;:&quot;3&quot;,&quot;input_description&quot;:&quot;&quot;,&quot;input_default_value&quot;:&quot;1&quot;}],&quot;cm_id&quot;:&quot;3&quot;,&quot;cm_name&quot;:&quot;10/04/2025 11:43:06 - CM - Heat load profiles&quot;,&quot;cm_prefix&quot;:&quot;10/04/2025 11:43:06&quot;,&quot;payload&quot;:{&quot;areas&quot;:[&quot;FR101&quot;],&quot;year&quot;:2012,&quot;layers_needed&quot;:[{&quot;id&quot;:0,&quot;name&quot;:&quot;Heat density residential sector&quot;,&quot;workspaceName&quot;:&quot;heat_res_curr_density&quot;,&quot;download_url&quot;:&quot;https://gitlab.com/hotmaps/buildings/heat/heat_res_curr_density/raw/master/data/heat_res_curr_density.tif&quot;,&quot;layer_type&quot;:&quot;heat_res_curr_density&quot;,&quot;data_type&quot;:&quot;raster&quot;},{&quot;id&quot;:0,&quot;name&quot;:&quot;Heat density non-residential sector&quot;,&quot;workspaceName&quot;:&quot;heat_nonres_curr_density&quot;,&quot;download_url&quot;:&quot;https://gitlab.com/hotmaps/buildings/heat/heat_nonres_curr_density/raw/master/data/heat_nonres_curr_density.tif&quot;,&quot;layer_type&quot;:&quot;heat_nonres_curr_density&quot;,&quot;data_type&quot;:&quot;raster&quot;},{&quot;id&quot;:0,&quot;name&quot;:&quot;nuts_id_number&quot;,&quot;workspaceName&quot;:&quot;nuts_id_number&quot;,&quot;download_url&quot;:&quot;https://gitlab.com/hotmaps/nuts_id_number/raw/master/data/nuts_id_number.tif&quot;,&quot;layer_type&quot;:&quot;nuts_id_number&quot;,&quot;data_type&quot;:&quot;raster&quot;},{&quot;id&quot;:0,&quot;name&quot;:&quot;Gross floor area residential&quot;,&quot;workspaceName&quot;:&quot;gfa_res_curr_density&quot;,&quot;download_url&quot;:&quot;https://gitlab.com/hotmaps/buildings/gfa_res_curr_density/raw/master/data/gfa_res_curr_density.tif&quot;,&quot;layer_type&quot;:&quot;gfa_res_curr_density&quot;,&quot;data_type&quot;:&quot;raster&quot;},{&quot;id&quot;:0,&quot;name&quot;:&quot;Gross floor area non-residential&quot;,&quot;workspaceName&quot;:&quot;gfa_nonres_curr_density&quot;,&quot;download_url&quot;:&quot;https://gitlab.com/hotmaps/buildings/gfa_nonres_curr_density/raw/master/data/gfa_nonres_curr_density.tif&quot;,&quot;layer_type&quot;:&quot;gfa_nonres_curr_density&quot;,&quot;data_type&quot;:&quot;raster&quot;}],&quot;type_layer_needed&quot;:[{&quot;name&quot;:null,&quot;type&quot;:&quot;heat_res_curr_density&quot;,&quot;description&quot;:&quot;Select heat demand residential density layer.&quot;},{&quot;name&quot;:null,&quot;type&quot;:&quot;heat_nonres_curr_density&quot;,&quot;description&quot;:&quot;Select heat demand teritary density layer.&quot;},{&quot;name&quot;:null,&quot;type&quot;:&quot;nuts_id_number&quot;,&quot;description&quot;:null},{&quot;name&quot;:null,&quot;type&quot;:&quot;gfa_res_curr_density&quot;,&quot;description&quot;:&quot;Select gross floor area residential layer&quot;},{&quot;name&quot;:null,&quot;type&quot;:&quot;gfa_nonres_curr_density&quot;,&quot;description&quot;:&quot;Select gross floor area tertiary layer&quot;}],&quot;vectors_needed&quot;:[]}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracteur JSON">
            <stringProp name="JSONPostProcessor.referenceNames">status_id</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.status_id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get Access Token" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import groovy.json.JsonSlurper
import java.net.URLEncoder

def tokenUrl = &apos;https://auth.citiwattsdevcrashtest.hevs.ch/realms/citiwatts-dev/protocol/openid-connect/token&apos;

def params = [
    &apos;client_id&apos;     : &apos;frontend&apos;,
    &apos;grant_type&apos;    : &apos;password&apos;,
    &apos;username&apos;      : &apos;gianluca.gloor@hes-so.ch&apos;,  // &lt;-- Enter your username here
    &apos;password&apos;      : &apos;Alin@.Ces@rino_2501&apos;   // &lt;-- Enter your password here
]

def postData = params.collect { key, value -&gt;
    &quot;${key}=${URLEncoder.encode(value.toString(), &apos;UTF-8&apos;)}&quot;
}.join(&apos;&amp;&apos;)

def connection = new URL(tokenUrl).openConnection()
connection.setRequestMethod(&quot;POST&quot;)
connection.setDoOutput(true)
connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;)
connection.getOutputStream().write(postData.getBytes(&quot;UTF-8&quot;))

def responseText = connection.getInputStream().getText(&quot;UTF-8&quot;)
def json = new JsonSlurper().parseText(responseText)

def accessToken = json.access_token

// Save token to JMeter properties so that it can be reused by other samplers.
props.put(&quot;ACCESS_TOKEN&quot;, accessToken)
log.info(&quot;Token retrieved: &quot; + accessToken)
</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/cm/status/">
          <stringProp name="HTTPSampler.domain">api.citiwattsdevcrashtest.hevs.ch</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.path">/api/cm/status/${status_id}</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracteur JSON">
            <stringProp name="JSONPostProcessor.referenceNames">state</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.state</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller">
          <stringProp name="WhileController.condition">${__groovy(!vars.get(&quot;state&quot;).equals(&quot;SUCCESS&quot;))}</stringProp>
        </WhileController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer">
            <stringProp name="ConstantTimer.delay">3000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/cm/status">
            <stringProp name="HTTPSampler.domain">api.citiwattsdevcrashtest.hevs.ch</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.path">/api/cm/status/${status_id} </stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor">
              <stringProp name="JSONPostProcessor.referenceNames">state</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.state</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
